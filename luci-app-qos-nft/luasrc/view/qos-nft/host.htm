<%#
 Licensed to the public under the Apache License 2.0.
-%>

<%+header%>

<script type="text/javascript">//<![CDATA[
	var bwxhr = new XHR();

	var RC = { };
	var em = 0;
	var ec = 1;

	var rate_table;

function init_bytes(rl, ra) {
    var bytes_pre;
    var obj = {};
    var currentTime = new Date().getTime();
    obj.chain = rl.chain;
    obj.ipaddr = rl.expr[em].match.right;
    obj.packets = rl.expr[ec].counter.packets;
    obj.bytes = rl.expr[ec].counter.bytes;
    obj.rate = 0;

    var storedFirstSeen = localStorage.getItem(obj.ipaddr + '_firstSeen');
    if (storedFirstSeen) {
        obj.firstSeen = parseInt(storedFirstSeen, 10);
    } else {
        obj.firstSeen = currentTime;
        localStorage.setItem(obj.ipaddr + '_firstSeen', currentTime);
    }

    if (RC[obj.chain] && RC[obj.chain][obj.ipaddr]) {
        bytes_pre = RC[obj.chain][obj.ipaddr].bytes;
    } else {
        bytes_pre = 0;
    }

    obj.rate = (bytes_pre > 0) ? (obj.bytes - bytes_pre) / 3 : 0;

    // Add connection count retrieval
    obj.connections = getConnectionCount(obj.ipaddr);

    if (!RC[obj.chain]) RC[obj.chain] = {};
    RC[obj.chain][obj.ipaddr] = {
        bytes: obj.bytes,
        firstSeen: obj.firstSeen
    };

    if (!ra[obj.chain]) ra[obj.chain] = [];
    ra[obj.chain].push(obj);
}

// Function to get connection count for an IP address (simulated here, needs backend support)
function getConnectionCount(ipaddr) {
    // In real case, make an XHR or similar request to fetch connection count from backend
    // This is a placeholder
    return Math.floor(Math.random() * 100); // Simulating connection count
}

function bytes_label(bytes) {
    var uby = '<%:kB%>';
    var kby = (bytes / 1024);

    if (kby > 1024) {
        uby = '<%:MB%>';
        kby = (kby / 1024);
    }

    return `${kby.toFixed(2)} ${uby}`;
}

function print_combined_table(tbl, rs, ra_download, ra_upload) {
    const combinedData = {};

    for (const entry of ra_download) {
        combinedData[entry.ipaddr] = {
            downloadRate: entry.rate,
            downloadPackets: entry.packets,
            downloadBytes: entry.bytes,
            connections: entry.connections
        };
    }

    for (const entry of ra_upload) {
        if (combinedData[entry.ipaddr]) {
            combinedData[entry.ipaddr].uploadRate = entry.rate;
            combinedData[entry.ipaddr].uploadPackets = entry.packets;
            combinedData[entry.ipaddr].uploadBytes = entry.bytes;
        } else {
            combinedData[entry.ipaddr] = {
                uploadRate: entry.rate,
                uploadPackets: entry.packets,
                uploadBytes: entry.bytes,
                connections: entry.connections
            };
        }
    }

    const sortedData = Object.entries(combinedData).sort(([, a], [, b]) => b.downloadBytes - a.downloadBytes);

    for (const [ip, data] of sortedData) {
        rs.push([
            ip,
            '\u2191 ' + bytes_label(data.uploadRate) + '&nbsp;&nbsp;&nbsp;&nbsp;' + '\u2193 ' + bytes_label(data.downloadRate),
            '\u2191 ' + bytes_label(data.uploadBytes) + '&nbsp;&nbsp;&nbsp;&nbsp;' + '\u2193 ' + bytes_label(data.downloadBytes),
            '\u2191 ' + data.uploadPackets + ' Pkts' + '&nbsp;&nbsp;&nbsp;&nbsp;' + '\u2193 ' + data.downloadPackets + ' Pkts',
            data.connections
        ]);
    }

    cbi_update_table(tbl, rs, '<em><%:No information available%></em>');
    document.getElementById("host_count").innerHTML = "Online Number: " + sortedData.length;
}

/* Sorting functionality */
function sortTable(columnIndex) {
    const table = document.getElementById("rate_table");
    let rows = Array.from(table.querySelectorAll(".tr:not(.table-titles)"));
    
    // Determine the sorting order (ascending or descending)
    const sortOrder = (table.getAttribute("data-sort-column") == columnIndex && table.getAttribute("data-sort-order") == "asc") ? "desc" : "asc";
    table.setAttribute("data-sort-column", columnIndex);
    table.setAttribute("data-sort-order", sortOrder);

    rows.sort((a, b) => {
        const aData = a.children[columnIndex].innerText || a.children[columnIndex].textContent;
        const bData = b.children[columnIndex].innerText || b.children[columnIndex].textContent;

        if (!isNaN(parseFloat(aData)) && !isNaN(parseFloat(bData))) {
            return sortOrder === "asc" ? parseFloat(aData) - parseFloat(bData) : parseFloat(bData) - parseFloat(aData);
        }
        return sortOrder === "asc" ? aData.localeCompare(bData) : bData.localeCompare(aData);
    });

    // Clear the table except the header
    while (table.firstElementChild !== table.lastElementChild)
        table.removeChild(table.lastElementChild);

    // Re-insert the sorted rows
    rows.forEach(row => table.appendChild(row));
}

/* wait for SVG */
window.setTimeout(
    function() {
        if (!RC)
        {
            window.setTimeout(arguments.callee, 1000);
        }
        else
        {
            rate_table = document.getElementById('rate_table');
            rate_table.setAttribute("data-sort-column", "");
            rate_table.setAttribute("data-sort-order", "asc");

            /* render datasets, start update interval */
            XHR.poll(3, '<%=build_url("admin/status/realtime/qosnft_status")%>', null,
                function(x, json)
                {
                    var RA = {};
                    var rows = [];

                    var rules = json.nftables;
                    for (var i = 0; i < rules.length; i++)
                    {
                        if (!rules[i].rule)
                            continue;
                        if (rules[i].rule.table != 'qos-monitor')
                            continue;

                        var rl = rules[i].rule;
                        switch (rl.chain)
                        {
                            case 'download':
                            case 'upload': init_bytes(rl, RA); break;
                        }
                    }

                    /* display the result */
                    if (RA.download && RA.upload) {
                        while (rate_table.firstElementChild !== rate_table.lastElementChild)
                            rate_table.removeChild(rate_table.lastElementChild);
                        print_combined_table(rate_table, rows, RA.download, RA.upload);
                    }

                } /* function(x, json) */
            ); /* XHR.poll() */

            XHR.run();
        }
    }, 1000
);
//]]></script>

<h2 name="content"><%:Online host%></h2>

<div class="cbi-map-descr"><%:Real time traffic statistics of online hosts%></div>

<div id="host_count">Online Number: 0</div>

<fieldset class="cbi-section" id="cbi-table-table">
    <div class="cbi-section-node">
        <div class="table" id="rate_table">
            <div class="tr table-titles">
                <div class="th col-1 hide-xs" onclick="sortTable(0)"><%:IP Address%></div>
                <div class="th col-2" onclick="sortTable(1)"><%:Realtime Rate%></div>
                <div class="th col-3" onclick="sortTable(2)"><%:Bytes Total%></div>
                <div class="th col-4" onclick="sortTable(3)"><%:Packets Total%></div>
                <div class="th col-5" onclick="sortTable(4)"><%:Active Connections%></div>
                <div class="th col-6" onclick="sortTable(5)"><%:Online Duration%></div>
            </div>
        </div>
    </div>
</fieldset>

<%+footer%>
